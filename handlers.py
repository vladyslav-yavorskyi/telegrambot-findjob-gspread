from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove,Message, CallbackQuery
import logging

from aiogram.filters import Command, CommandStart

from buttons import keyboard_find, keyboard_choose, builder
from helpers import  validate_phone_number
from request import add_lead
from states import Info


router = Router()


@router.message(CommandStart())
async def send_welcome(message: Message, state: FSMContext):
    await state.set_state(Info.job_search_target)
    await message.answer("üëã–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç –∫–∞–¥—Ä–æ–≤–æ—ó –∞–≥–µ–Ω—Ü—ñ—ó <b>Cel Plus</b>üéØ¬† \n–¢—É—Ç –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—é –∑–∞—è–≤–∫—É, —â–æ–± –Ω–∞—à—ñ"
                         " —Ä–µ–∫—Ä—É—Ç–µ—Ä–∏ –∑–≤'—è–∑–∞–ª–∏—Å—è –∑ –í–∞–º–∏ —ñ –¥–æ–ø–æ–º–æ–≥–ª–∏ –∑–Ω–∞–π—Ç–∏ <b>—Ä–æ–±–æ—Ç—É –≤ –ü–æ–ª—å—â—ñ</b>üáµüá±")
    await message.answer('üîé–î–ª—è –∫–æ–≥–æ –í–∏ —à—É–∫–∞—î—Ç–µ —Ä–æ–±–æ—Ç—É?', reply_markup=keyboard_find)


@router.message(Info.job_search_target)
async def process_job_search_target(message: Message, state: FSMContext):
    await state.update_data(job_search_target=message.text)
    await message.answer("üôã‚Äç‚ôÇÔ∏è–Ø–∫ –¥–æ –í–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?", reply_markup=ReplyKeyboardRemove())
    await state.set_state(Info.name)


@router.message(Info.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –∫–æ–¥–æ–º –∫—Ä–∞—ó–Ω–∏"
                         " (+48 –ü–æ–ª—å—â–∞, +380 –£–∫—Ä–∞—ó–Ω–∞, —Ç–æ—â–æ):")
    await state.set_state(Info.phone)


@router.message(Info.phone)
async def process_phone(message: Message, state: FSMContext):
    phone = "".join(message.text.split())
    if not validate_phone_number(phone):
        return await message.answer('üìû–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: \n \n'
                                    '<i>–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤:'
                                    ' +380, 380, +48 –∞–±–æ 48, –∞ –ø—ñ—Å–ª—è –ø—Ä–µ—Ñ—ñ–∫—Å—É –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 8 –¥–æ 10 —Ü–∏—Ñ—Ä –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö'
                                    ' —ñ–Ω—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —á–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤</i> ')


    await state.update_data(phone=message.text)
    await show_summary(message, state)


async def show_summary(message: Message, state: FSMContext):

    data = await state.get_data()
    await message.answer(f"‚ÑπÔ∏è–í–∞—à—ñ –¥–∞–Ω—ñ: \nüôã‚Äç‚ôÇÔ∏è–Ü–º'—è: <b>{data['name']}</b> \nüìû–¢–µ–ª–µ—Ñ–æ–Ω: <b>{data['phone']}</b> \n"
                         f"üë®‚Äçüë©‚Äçüë¶‚Äçüë¶–í–∏ —à—É–∫–∞—î—Ç–µ —Ä–æ–±–æ—Ç—É –¥–ª—è: "
                         f"<b>{data['job_search_target']}</b>")
    await message.answer("<b>–í—Å–µ –≤—ñ—Ä–Ω–æ?</b>", reply_markup=keyboard_choose)
    await message.answer("–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>–¢–∞–∫</b> ‚úÖ, —è–∫—â–æ –Ω—ñ - <b>–ù—ñ</b> ‚ùå")

    await state.set_state(Info.is_correct)


@router.message(Info.is_correct, F.text == '–¢–∞–∫')
async def process_is_correct(message: Message, state: FSMContext):
    data = await state.get_data()
    name = data['name']
    phone = data['phone']
    job_search_target = data['job_search_target']
    add_lead(name, phone, job_search_target)
    await message.answer("‚òéÔ∏è<b>–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!</b> –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—å –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º, —â–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Ä–æ–±–æ—Ç—É —ñ "
                         "–≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –≤—Å—ñ –í–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è! \n<b>–ë–∞–∂–∞—î–º–æ –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!</b>‚òÄÔ∏è‚ú®", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# @router.message()
# async def reply_on_every_message(message: Message):
#     await message.answer('every message after ')

@router.message(Info.is_correct, F.text == '–ù—ñ')
async def process_is_correct(message: Message, state: FSMContext):

    await message.answer("–Ø–∫i –¥–∞–Ωi –Ω–µ–≤i—Ä–Ωi?", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏:", reply_markup=builder.as_markup())


@router.callback_query(F.data == 'name_update')
async def process_name_update(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üôã‚Äç‚ôÇÔ∏è–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:")
    await state.set_state(Info.name_update)


@router.message(Info.name_update)
async def process_name_update(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await show_summary(message, state)


@router.callback_query(F.data == 'phone_update')
async def process_phone_update(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üìû–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    await state.set_state(Info.phone_update)


@router.message(Info.phone_update)
async def process_phone_update(message: Message, state: FSMContext):
    phone = ''.join(message.text.split())
    if not validate_phone_number(phone):
        return await message.answer('üìû–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ: \n \n'
                                    '<i>–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–µ—Ñ—ñ–∫—Å—ñ–≤:'
                                    ' +380, 380, +48 –∞–±–æ 48, –∞ –ø—ñ—Å–ª—è –ø—Ä–µ—Ñ—ñ–∫—Å—É –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 8 –¥–æ 10 —Ü–∏—Ñ—Ä –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö'
                                    ' —ñ–Ω—à–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ —á–∏ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫—ñ–≤</i> ')
    await state.update_data(phone=message.text)
    await show_summary(message, state)


@router.callback_query(F.data == 'job_search_target_update')
async def process_job_search_target_update(call: CallbackQuery, state: FSMContext):
    await call.message.answer("üîé–î–ª—è –∫–æ–≥–æ –í–∏ —à—É–∫–∞—î—Ç–µ —Ä–æ–±–æ—Ç—É?", reply_markup=keyboard_find)
    await state.set_state(Info.job_search_target_update)


@router.message(Info.job_search_target_update)
async def process_job_search_target_update(message: Message, state: FSMContext):
    await state.update_data(job_search_target=message.text)
    await show_summary(message, state)


@router.message(Command('cancel'))
@router.message(F.text.casefold() == 'cancel')
async def cancel(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    logging.info('Cancelling state %r', current_state)
    await state.clear()
    await message.answer("–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é", reply_markup=ReplyKeyboardRemove())
    await message.answer_sticker( sticker='CAACAgIAAxkBAAElxC5k-g3VwZUCAAFChZoAASfkM4fiw5XvAAJeAAPBnGAM2cOQTay6uFAwBA')
